//Visit http://metah.codeplex.com for more information
alias "http://schemas.example.com" as nsbase;
alias "http://schemas.example.com/ebusiness" as nsebiz;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;//for XmlReader & XmlWriter
using System.Xml.Linq;//for XName & XNamespace
using X = Metah.X;
using Metah.X.Extensions;
using WebAPI = Example.Service.EBusiness.WebAPI;

xnamespace {nsbase} [namespace: Example.Client] {
    type Phone
        ##{
            private Phone(){}
            internal Phone(string value, string @type){
                EnsureAttributeSet().Type_Value = @type;
                Value = value;
            }
        }
    ;
    type Phones
        ##{
            private Phones(){}
            internal Phones(params Phone[] phoneTypes){
                var phoneList = EnsureComplexChild().Ensure_Phones();
                foreach(var phoneType in phoneTypes){
                    var phone = phoneList.CreateAndAddItem();
                    phone.Type = phoneType;
                }
            }
        }
    ;
    type Address
        ##{
            private Address(){}
            internal Address(string country, string state, string city, string address, string zipCode){
                var attset = EnsureComplexChild().Ensure_Choice().Ensure_Normal().EnsureAttributeSet();
                attset.Country_Value = country;
                if(state != null) attset.State_Value = state;
                attset.City_Value = city;
                attset.Address_Value = address;
                attset.ZipCode_Value = zipCode;
            }
            internal Address(decimal longitude, decimal latitude){
                var attset = EnsureComplexChild().Ensure_Choice().Ensure_Geography().EnsureAttributeSet();
                attset.Longitude_Value = longitude;
                attset.Latitude_Value = latitude;
            }
        }
    ;
    public sealed class XmlData {
        public XmlData(string name, object value, bool isAttribute = false) {
            if (string.IsNullOrEmpty(name)) throw new ArgumentNullException("name");
            Name = name;
            Value = value;
            IsAttribute = isAttribute;
        }
        public XmlData(string name, params object[] values) {
            if (string.IsNullOrEmpty(name)) throw new ArgumentNullException("name");
            Name = name;
            Value = values;
        }
        public readonly string Name;
        public readonly object Value;
        public readonly bool IsAttribute;
        internal IEnumerable<object> Values{
            get{
                var values = Value as IEnumerable<object>;
                if(values != null) return values;
                if(Value is XmlData) return Enumerable.Repeat(Value, 1);
                return null;
            }
        }
    }
    type Html
        ##{
            private Html(){}
            internal Html(XmlData data){
                EnsureComplexChild().Ensure_Content().ReferentialElement = Create(data);
            }
            private static X.Element Create(XmlData data){
                if(data == null) throw new ArgumentNullException("data");
                var ele = new X.Element(HtmlUri.GetName(data.Name));
                var values = data.Values;
                if(values != null){
                    var ct = new X.ComplexType();
                    foreach(var value in values){
                        var vData = value as XmlData;
                        if(vData != null){
                            if(vData.IsAttribute)
                                ct.EnsureAttributeSet().Add(new X.Attribute(XName.Get(vData.Name), vData.Value == null ? null : new X.SimpleType(vData.Value.ToString())));
                            else
                                ct.EnsureComplexChild().Add(Create(vData));
                        }
                        else if(value != null)
                            ct.EnsureComplexChild().Add(new X.Text(value.ToString()));
                    }
                    ele.Type = ct;
                }
                else if(data.Value != null)
                    ele.Type = new X.SimpleType(data.Value.ToString());
                return ele;
            }
            internal static readonly XNamespace HtmlUri = XNamespace.Get("http://www.w3.org/1999/xhtml");
        }
    ;
    type Image
        ##{
            private Image(){}
            internal Image(string mime, byte[] bytes){
                EnsureAttributeSet().Mime_Value = mime;
                EnsureSimpleChild().SetValue(bytes, true);
            }
        }
    ;
    type Money
        ##{
            private Money(){}
            internal Money(string @type, decimal value){
                EnsureAttributeSet().Type_Value = @type;
                Value = value;
            }
        }
    ;
    element RequestMessage
        ##{
            private RequestMessage_ElementClass(){}
            internal RequestMessage_ElementClass(X.Element body){
                EnsureComplexChild().Ensure_Body().ReferentialElement = body;
            }
        }
    ;
}
xnamespace {nsebiz} [namespace: Example.Client.EBusiness] {
    element IdList
        ##{
            private IdList_ElementClass(){}
            internal IdList_ElementClass(IEnumerable<int?> ids){
                EnsureType().AddRange(ids);
            }
        }
    ;
    element Contact
        ##{
            protected Contact_ElementClass(){}
            protected Contact_ElementClass(string name){
                var attset = EnsureAttributeSet();
                attset.Name_Value = name;
                attset.Email_Value = "someone@example.com";
                attset.RegistrationDate_Value = DateTime.Now;
                var cc = EnsureComplexChild();
                cc.Ensure_Phones().Type = new Phones(new Phone("1234567", PhoneType.Work), new Phone("2233445", PhoneType.Home));
                cc.Ensure_Address().Type = WebAPIClient.Random.Next() % 2 == 0 ? new Address("China", "Sichuan", "Chengdu", "somewhere", "610000") : new Address(100.758M, 30.224M);
            }
        }
    ;
    element Customer
        ##{
            private Customer_ElementClass(){}
            internal Customer_ElementClass(string name) : base(name){
                var attset = EnsureAttributeSet();
                attset.Reputation_Value = Reputation.Bronze;
            }
        }
    ;
    element Supplier
        ##{
            private Supplier_ElementClass(){}
            internal Supplier_ElementClass(string name) : base(name){
                var attset = EnsureAttributeSet();
                var cc = EnsureComplexChild();
                var bankAccount = cc.Ensure_BankAccount();
                bankAccount.Value = "1234567890";
                bankAccount.EnsureAttributeSet().Type_Value = "Type1";
            }
        }
    ;
    element Order
        ##{
            private Order_ElementClass(){}
            internal Order_ElementClass(int? customerId, int?[] productIds){
                var attset = EnsureAttributeSet();
                attset.CustomerId_Value = customerId;
                attset.OrderDate_Value = DateTime.Now;
                var cc = EnsureComplexChild();
                cc.Ensure_Phones().Type = new Phones(new Phone("7654321", PhoneType.Work), new Phone("1122334", PhoneType.Home));
                cc.Ensure_ShippingAddress().Type = WebAPIClient.Random.Next() % 2 == 0 ? new Address("China", "Sichuan", "Suining", "somewhere", "629000") : new Address(105.234M, 29.745M);
                var details = cc.Ensure_Details();
                for(var i = 0; i < 3; i++){
                    var detail = details.CreateAndAddItem();
                    var dattset = detail.EnsureAttributeSet();
                    dattset.ProductId_Value = productIds[WebAPIClient.Random.Next(productIds.Length)];
                    dattset.Quantity_Value = (uint)(1 + WebAPIClient.Random.Next(4));
                    var dcc = detail.EnsureComplexChild();
                    dcc.Ensure_UnitPrice().Type = new Money("zh-CN", 8.88M + WebAPIClient.Random.Next(10));
                }
            }
        }
    ;
    element Product
        ##{
            protected Product_ElementClass(){}
            protected Product_ElementClass(string name){
                var attset = EnsureAttributeSet();
                attset.Name_Value = name;
                attset.StockQuantity_Value = 5;
                var cc = EnsureComplexChild();
                cc.Ensure_Description().Type = new Html(
                    new XmlData("p",
                        "This is a really ",
                        new XmlData("b",
                            "cool and ",
                            new XmlData("i", "funny ")
                        ),
                        new XmlData("br", null),
                        new XmlData("a",
                            new XmlData("href", "http://example.com", true),
                            "product."
                        )
                    )
                );
                cc.Ensure_Image().Type = new Image("image/jpeg", new byte[]{1,2,3,4});
                cc.Ensure_Price().Type = new Money("zh-CN", 9.99M);
            }
        }
    ;
    element Shoe
        ##{
            protected Shoe_ElementClass(){}
            protected Shoe_ElementClass(string name):base(name){
                var cc = EnsureComplexChild();
                cc.Ensure_Size().Value = 25.5M;
            }
        }
    ;
    element OutdoorShoe
        ##{
            protected OutdoorShoe_ElementClass(){}
            internal OutdoorShoe_ElementClass(string name, bool? waterproof = null):base(name){
                var attset = EnsureAttributeSet();
                if(waterproof != null) attset.Waterproof_Value = waterproof;
            }
        }
    ;
    element SuperOutdoorShoe
        ##{
            private SuperOutdoorShoe_ElementClass(){}
            internal SuperOutdoorShoe_ElementClass(string name):base(name, true){}
        }
    ;
    type Order
        children{
            element[membername: Details]
                ## as CustomersQueryResultOrderDetial{
                    public CustomersQueryResultProduct Product{get;internal set;}
                }
            ;
        };
    ;
    type CustomersQueryResult
        children{
            element Customers as
                type
                    children{
                        elementref[membername: Customers]
                            ## as CustomersQueryResultCustomer {
                                private List<CustomersQueryResultOrder> _orders;
                                public List<CustomersQueryResultOrder> Orders{get{return _orders ?? (_orders = new List<CustomersQueryResultOrder>()); }}
                            }
                        ;
                    };
                ;
            ;
            element Orders as
                type
                    children{
                        elementref[membername: Orders]
                            ## as CustomersQueryResultOrder {
                                public decimal Amount{
                                    get{
                                        return (decimal)ComplexChild.Details.ItemList.Select(d => d.AttributeSet.Quantity_Value * d.ComplexChild.UnitPrice.Value).Sum();
                                    }
                                }
                            }
                        ;
                    };
                ;
            ;
            element Products as
                type
                    children{
                        elementref[membername: Products]
                            ## as CustomersQueryResultProduct
                        ;
                    };
                ;
            ;
        };
    ;
    element CustomersQueryResult
        ##{
            protected override bool TryValidated(X.Context context, bool success){
                success = base.TryValidated(context, success);
                if(success){
                    foreach(var keyRef in CustomerToOrders_Constraint.KeyRefs){
                        var customer = (CustomersQueryResultCustomer)keyRef.ReferenceIdentityValue.IdentityElement;
                        var order = (CustomersQueryResultOrder)keyRef.ReferentialIdentityValue.IdentityElement;
                        customer.Orders.Add(order);
                    }
                    foreach(var keyRef in DetailToProduct_Constraint.KeyRefs){
                        var detail = (CustomersQueryResultOrderDetial)keyRef.ReferenceIdentityValue.IdentityElement;
                        var product = (CustomersQueryResultProduct)keyRef.ReferentialIdentityValue.IdentityElement;
                        detail.Product = product;
                    }
                }
                return success;
            }
        }
    ;
    //
    //
    public static class WebAPIClient{
        internal static readonly Random Random = new Random((int)DateTime.Now.Ticks);
        private static string GetString(X.Context ctx){
            var sb = new StringBuilder();
            foreach(var diag in ctx.Diagnostics)
                sb.AppendLine(diag.ToString());
            return sb.ToString();
        }
        private static bool GetResponse<T>(string fileName, out T body, out string faultString) where T : X.Element{
            body = null;
            faultString = null;
            using(var reader = XmlReader.Create(fileName)){
                var ctx = new X.Context();
                ResponseMessage_ElementClass msg;
                if(ResponseMessage_ElementClass.TryLoadAndValidate(reader, ctx, out msg)){
                    var @choice = msg.ComplexChild.Choice;
                    var choiceBody = @choice.Body;
                    if(choiceBody != null){
                        body = choiceBody.ReferentialElement as T;
                        if(body == null) faultString = "Invalid response body, expecting " + typeof(T).Name;
                    }
                    else faultString = @choice.Fault.Value;
                }
                else faultString = GetString(ctx);
            }
            return body != null;
        }

        private static void SaveRequest(string fileName, X.Element body){
            using (var writer = XmlWriter.Create(fileName, new XmlWriterSettings { Indent = true }))
                new RequestMessage_ElementClass(body).Save(writer);
        }
        private static int? AddContact(string name, bool isCustomer){
            var contact = isCustomer ? (Contact_ElementClass)new Customer_ElementClass(name) : new Supplier_ElementClass(name);
#if DEBUG
            var ctx = new X.Context();
            if(!contact.TryValidate(ctx)){
                Console.WriteLine(GetString(ctx));
                return null;
            }
#endif
            var fileName = @"d:\AddContact{0}.xml".InvariantFormat(name);
            SaveRequest(fileName, contact);
            var respFileName = WebAPI.AddContact(fileName);
            Id_ElementClass id;
            string faultString;
            if(GetResponse(respFileName, out id, out faultString)) return id.Value;
            Console.WriteLine(faultString);
            return null;
        }
        private static int? AddProduct(string name, bool isSuper){
            var product = isSuper? (Product_ElementClass)new SuperOutdoorShoe_ElementClass(name) : new OutdoorShoe_ElementClass(name);
#if DEBUG
            var ctx = new X.Context();
            if(!product.TryValidate(ctx)){
                Console.WriteLine(GetString(ctx));
                return null;
            }
#endif
            var fileName = @"d:\AddProduct{0}.xml".InvariantFormat(name);
            SaveRequest(fileName, product);
            var respFileName = WebAPI.AddProduct(fileName);
            Id_ElementClass id;
            string faultString;
            if(GetResponse(respFileName, out id, out faultString)) return id.Value;
            Console.WriteLine(faultString);
            return null;
        }
        private static int? PlaceOrder(int? customerId, int?[] productIds){
            var order = new Order_ElementClass(customerId, productIds);
#if DEBUG
            var ctx = new X.Context();
            if(!order.TryValidate(ctx)){
                Console.WriteLine(GetString(ctx));
                return null;
            }
#endif
            var fileName = @"d:\PlaceOrder4Customer#{0}.xml".InvariantFormat(customerId);
            SaveRequest(fileName, order);
            var respFileName = WebAPI.PlaceOrder(fileName);
            Id_ElementClass id;
            string faultString;
            if(GetResponse(respFileName, out id, out faultString)) return id.Value;
            Console.WriteLine(faultString);
            return null;
        }
        private static void QueryCustomers(params int?[] customerIds){
            var idList = new IdList_ElementClass(customerIds);
            var fileName = @"d:\QueryCustomers.xml";
            SaveRequest(fileName, idList);
            var respFileName = WebAPI.QueryCustomers(fileName);
            CustomersQueryResult_ElementClass result;
            string faultString;
            if(GetResponse(respFileName, out result, out faultString)){
                foreach(var customer in result.ComplexChild.Customers.ComplexChild.Customers){
                    Console.WriteLine("Customer: #{0}, Name: {1}", customer.AttributeSet.Id_Value, customer.AttributeSet.Name_Value);
                    foreach(var order in customer.Orders){
                        Console.WriteLine("\tOrder: #{0}, Amount: {1}", order.AttributeSet.Id_Value, order.Amount);
                        foreach(var detail in order.ComplexChild.Details){
                            Console.WriteLine("\t\tDetail: Product: {0}, Price: {1}, Quantity: {2}", detail.Product.AttributeSet.Name_Value,
                                detail.ComplexChild.UnitPrice.Value, detail.AttributeSet.Quantity_Value);
                        }
                    }
                }
            }
            else Console.WriteLine(faultString);
        }
        static void Main(string[] args) {
            var tankId = AddContact("Tank", true);
            var mikeId = AddContact("Mike", true);
            var jackId = AddContact("Jack", true);
            var ericId = AddContact("Eric", false);
            var explorerId = AddProduct("Explorer", true);
            var hikingId = AddProduct("Hiking", true);
            var runnerId = AddProduct("Runner", false);
            var skyWalkerId = AddProduct("SkyWalker", false);
            var productIds = new []{explorerId, hikingId, runnerId, skyWalkerId};
            PlaceOrder(tankId, productIds);
            PlaceOrder(tankId, productIds);
            PlaceOrder(mikeId, productIds);
            QueryCustomers(tankId, mikeId, jackId);
        }
    }

}