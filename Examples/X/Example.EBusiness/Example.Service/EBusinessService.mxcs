//EbusinessService.mxcs
//Visit http://metah.codeplex.com for more information
alias "http://schemas.example.com" as nsbase;
alias "http://schemas.example.com/ebusiness" as nsebiz;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;//for XmlReader & XmlWriter
using System.Xml.Linq;//for XName & XNamespace
using X = Metah.X;
using Metah.X.Extensions;

xnamespace {nsbase} [namespace: Example.Service] {
    element ResponseMessage
        ##{
            private ResponseMessage_ElementClass(){}
            internal ResponseMessage_ElementClass(X.Element body, string faultString){
                var @choice = EnsureComplexChild().Ensure_Choice();
                if(body != null) @choice.Ensure_Body().ReferentialElement = body;
                else @choice.Ensure_Fault().Value = faultString;
            }
        }
    ;
}
xnamespace {nsebiz} [namespace: Example.Service.EBusiness] {
    element Id
        ##{
            private Id_ElementClass(){}
            internal Id_ElementClass(int? id){ Value = id; }
        }
    ;
    element CustomersQueryResult
        ##{
            private CustomersQueryResult_ElementClass(){}
            internal CustomersQueryResult_ElementClass(IEnumerable<Customer_ElementClass> customers, IEnumerable<Order_ElementClass> orders, IEnumerable<Product_ElementClass> products){
                var cc = EnsureComplexChild();
                var customerlist = cc.Ensure_Customers().EnsureComplexChild().Ensure_Customers();
                foreach(var customer in customers)
                    customerlist.CreateAndAddItem().ReferentialElement = customer;
                var orderlist = cc.Ensure_Orders().EnsureComplexChild().Ensure_Orders();
                foreach(var order in orders)
                    orderlist.CreateAndAddItem().ReferentialElement = order;
                var productlist = cc.Ensure_Products().EnsureComplexChild().Ensure_Products();
                foreach(var product in products)
                    productlist.CreateAndAddItem().ReferentialElement = product;
            }
        }
    ;
    //
    //Web API模拟。实际该怎么设计（比如使用REST式还是SOAP式）超出了PLX的范围
    public static class WebAPI{
        private static string GetString(X.Context ctx){
            var sb = new StringBuilder();
            foreach(var diag in ctx.Diagnostics)
                sb.AppendLine(diag.ToString());
            return sb.ToString();
        }
        private static bool GetRequest<T>(string fileName, out T body, out string faultString) where T : X.Element{
            body = null;
            faultString = null;
            using(var reader = XmlReader.Create(fileName)){
                var ctx = new X.Context();
                RequestMessage_ElementClass msg;
                if(RequestMessage_ElementClass.TryLoadAndValidate(reader, ctx, out msg)){
                    body = msg.ComplexChild.Body.ReferentialElement as T;
                    if(body == null) faultString = "Invalid request body, expecting " + typeof(T).Name;
                }
                else faultString = GetString(ctx);
            }
            return body != null;
        }
        private static void SaveResponse(string fileName, X.Element body, string faultString){
            using (var writer = XmlWriter.Create(fileName, new XmlWriterSettings { Indent = true }))
                new ResponseMessage_ElementClass(body, faultString).Save(writer);
        }
        //
        private static readonly Dictionary<int?, Contact_ElementClass> _contactDict = new Dictionary<int?, Contact_ElementClass>();//key: id
        private static readonly Dictionary<int?, Product_ElementClass> _productDict = new Dictionary<int?, Product_ElementClass>();//key: id
        private static readonly Dictionary<int?, Order_ElementClass> _orderDict = new Dictionary<int?, Order_ElementClass>();//key: id
        private static Customer_ElementClass TryGetCustomer(int? customerId){
            return _contactDict.TryGetValue(customerId) as Customer_ElementClass;
        }
        public static string AddContact(string fileName){
            Contact_ElementClass contact;
            string faultString;
            int? id = null;
            if(GetRequest(fileName, out contact, out faultString)){
                var name = contact.AttributeSet.Name_Value;
                if(_contactDict.Values.Any(i => i.AttributeSet.Name_Value == name))
                    faultString = "Duplicate contact name: " + name;
                else{
                    id = _contactDict.Count + 1;
                    contact.AttributeSet.Id_Value = id;
                    _contactDict.Add(id, contact);
                }
            }
            var respFileName = fileName + ".resp.xml";
            SaveResponse(respFileName, faultString == null? new Id_ElementClass(id) : null, faultString);
            return respFileName;
        }
        public static string AddProduct(string fileName){
            Product_ElementClass product;
            string faultString;
            int? id = null;
            if(GetRequest(fileName, out product, out faultString)){
                id = _productDict.Count + 1;
                product.AttributeSet.Id_Value = id;
                _productDict.Add(id, product);
            }
            var respFileName = fileName + ".resp.xml";
            SaveResponse(respFileName, faultString == null? new Id_ElementClass(id) : null, faultString);
            return respFileName;
        }
        public static string PlaceOrder(string fileName){
            Order_ElementClass order;
            string faultString;
            int? id = null;
            if(GetRequest(fileName, out order, out faultString)){
                if(TryGetCustomer(order.AttributeSet.CustomerId_Value) == null)
                    faultString = "Invalid customer id: " + order.AttributeSet.CustomerId_Value;
                else{
                    foreach(var detail in order.ComplexChild.Details){
                        if(!_productDict.ContainsKey(detail.AttributeSet.ProductId_Value)){
                            faultString = "Invalid product id: " + detail.AttributeSet.ProductId_Value;
                            break;
                        }
                    }
                    if(faultString == null){
                        id = _orderDict.Count + 1;
                        order.AttributeSet.Id_Value = id;
                        _orderDict.Add(id, order);
                    }
                }
            }
            var respFileName = fileName + ".resp.xml";
            SaveResponse(respFileName, faultString == null? new Id_ElementClass(id) : null, faultString);
            return respFileName;
        }
        public static string QueryCustomers(string fileName){
            IdList_ElementClass idList;
            string faultString;
            var customerDict = new Dictionary<int?, Customer_ElementClass>();//key: id
            var orderList = new List<Order_ElementClass>();
            var productDict = new Dictionary<int?, Product_ElementClass>();//key: id
            if(GetRequest(fileName, out idList, out faultString)){
                foreach(var customerId in idList.Type){
                    if(!customerDict.ContainsKey(customerId)){
                        var customer = TryGetCustomer(customerId);
                        if(customer == null){
                            faultString = "Invalid customer id: " + customerId;
                            break;
                        }
                        var orderIdList = new List<int?>();
                        foreach(var orderPair in _orderDict){
                            var order = orderPair.Value;
                            if(order.AttributeSet.CustomerId_Value == customerId){
                                orderList.Add(order.DeepClone<Order_ElementClass>());
                                orderIdList.Add(orderPair.Key);
                                foreach(var detail in order.ComplexChild.Details){
                                    var productId = detail.AttributeSet.ProductId_Value;
                                    if(!productDict.ContainsKey(productId))
                                        productDict.Add(productId, _productDict[productId].DeepClone<Product_ElementClass>());
                                }
                            }
                        }
                        customer = customer.DeepClone<Customer_ElementClass>();
                        customer.EnsureAttributeSet().Ensure_OrderIds().EnsureType().AddRange(orderIdList);
                        customerDict.Add(customerId, customer);
                    }
                }
            }
            CustomersQueryResult_ElementClass result = null;
            if(faultString == null){
                result = new CustomersQueryResult_ElementClass(customerDict.Values, orderList, productDict.Values);
#if DEBUG
                var ctx = new X.Context();
                if(!result.TryValidate(ctx)){
                    faultString = GetString(ctx);
                    result = null;
                }
#endif
            }
            var respFileName = fileName + ".resp.xml";
            SaveResponse(respFileName, result, faultString);
            return respFileName;
        }
    }
}